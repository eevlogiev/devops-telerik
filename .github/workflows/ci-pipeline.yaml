name: CI Pipeline Testing

on:
    push:
        branches:
          - '*'
          - '!main'

jobs:
# Code style checks
  editorconfig:
    name: .editorconfig lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: editorconfig-checker/action-editorconfig-checker@main
      - run: editorconfig-checker

  pylint:
    name: Python lint
    runs-on: ubuntu-latest
    strategy:
      matrix:
          python-version: ["3.10", "3.11"]
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
            python -m pip install --upgrade pip
            pip install pylint -r requirements.txt
    - name: Analysing the code with pylint
      run: |
            pylint --disable=all --enable=unused-import $(git ls-files 'app/*.py')
  
  black_formatter:
    name: Python Black formatter
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: psf/black@stable
        with:
            options: "--check --verbose"
            src: "./app"

  markdownlint-cli:
    name: Markdown lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: nosborn/github-action-markdown-cli@v3.3.0
        with:
            files: ./README.md
            config_file: .markdownlint.yaml

#  Unit Testing
  unit-test:
    name: Unit Testing 
    runs-on: ubuntu-latest
    needs: [editorconfig, pylint, black_formatter, markdownlint-cli]
    strategy:
      matrix:
          python-version: ["3.10", "3.11"]
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
            python -m pip install --upgrade pip
            pip install -r requirements.txt
    - name: Running unit test
      run: |
            cd app && python -m unittest app_test.py

# Static Application Security Testing (SAST) 
  gitleaks:
    name: Leaked secrets detection
    needs: [unit-test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  sonarcloud:
    name: SonarCloud scan
    runs-on: ubuntu-latest
    needs: [unit-test]
    steps:
    - uses: actions/checkout@v4
      with:
        # Disabling shallow clone is recommended for improving relevancy of reporting
        fetch-depth: 0
    - name: SonarCloud Scan
      uses: sonarsource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
#          projectBaseDir: /
        args: >
          -Dsonar.organization=eevlogiev
          -Dsonar.projectKey=eevlogiev_devops-telerik

  snyk:
    name: Security vulnerabilities scan
    runs-on: ubuntu-latest
    needs: [unit-test]
    steps:
      - uses: actions/checkout@v4
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/python-3.8@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

# Build and Trivy scan
  build:
    name: Build Docker image
    needs: [gitleaks, sonarcloud, snyk]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Build Docker image
        run: docker build . --file Dockerfile --tag "${{ secrets.DOCKER_NAMESPACE }}/${{ secrets.DOCKER_REPOSITORY }}:${{ github.sha }}"
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'dictator1/flask:${{github.sha}}'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'     
    
# Push image to Docker hub
  push_to_registry:
    name: Push Docker image to Docker Hub
    needs: [build]
    runs-on: ubuntu-latest
    steps:     
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          # context: .
          push: true
          tags: "${{ secrets.DOCKER_NAMESPACE }}/${{ secrets.DOCKER_REPOSITORY }}:${{ github.sha }}"
